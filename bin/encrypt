#!/usr/bin/env sh
# -----------------------------------------------------------------------------
# NAME
#       encrypt
#
# DESCRIPTION
#       This script iterates through the `.decrypted` directory recursively and
#       encrypts all containing files using aws kms and envelope encryption
#       with openssl.
# -----------------------------------------------------------------------------

usage() {
    echo "Usage: $0"
    echo "  --debug      (boolean) Turn debugging on/ off"
    echo "  --help                 Show this help context"
    echo "  --kms_key_id (string)  AWS KMS Master Key id"
    exit 1
}

readonly TIME_START=$(date +%s%N)

readonly SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
readonly PROJECT_DIR=$(cd "${SCRIPT_DIR}/.." && pwd)

readonly KEY_DIR='.key'
readonly CIPHERTEXT_BLOB_DECODED_ID='ciphertext_blob_decoded'
readonly DATA_KEY_ID='data_key.json'
readonly PLAINTEXT_KEY_DECODED_ID='plaintext_key_decoded'

debug=false
file_count=0
kms_key_id=''

while [ $# -gt 0 ]; do
    case "$1" in
        --help)
            usage
            ;;
        --debug=*)
            debug="${1#*=}"
            ;;
        --kms_key_id=*)
            kms_key_id="${1#*=}"
            ;;
        *)
            usage
  esac
  shift
done

# Check if openssl is installed
command -v openssl version >/dev/null 2>&1 || {
    echo >&2 "Please install openssl (e.g. https://github.com/openssl/openssl) in your path before continuing."
    exit 1
}

log() {
    if [ true = $debug ] && [ ! -z "$1" ]; then
        printf "%s: %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$1"
    fi
}

encrypt_file() {
    local ENCRYPT=false    # Variable indicates whether or not we need to encrypt the SOURCE_FILE.
    local SOURCE_FILE="$1" # Path of the decrypted source file.
    local TARGET_FILE="$2" # Path of the encrypted target file.

    log "#encrypt"
    log "  source: \"$SOURCE_FILE\""
    log "  target: \"$TARGET_FILE\""

    if [ ! -f "$TARGET_FILE" ]; then
        # If the target file does not exist we need to
        # encrypt the SOURCE_FILE obviously.

        ENCRYPT=true
    else
        # If the target file exists we perform a checksums comparison
        # on both files in order to determine if potential changes in
        # the SOURCE_FILE need to be reflected in the TARGET_FILE.

        local DECRYPTED_CHECKSUM
        local ENCRYPTED_CHECKSUM

        DECRYPTED_CHECKSUM=$(openssl dgst -r -sha256 "$SOURCE_FILE" | sed 's/ .*//')
        ENCRYPTED_CHECKSUM=$(openssl enc -d -aes256 \
            -k "fileb:///$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID" \
            -in "$TARGET_FILE" | openssl dgst -r -sha256 | sed 's/ .*//')

        log "  sha256 source: \"$DECRYPTED_CHECKSUM\""
        log "  sha256 target: \"$ENCRYPTED_CHECKSUM\""

        if [ "$DECRYPTED_CHECKSUM" != "$ENCRYPTED_CHECKSUM" ]; then
            ENCRYPT=true
        fi
    fi

    if [ true = "$ENCRYPT" ]; then
        log "  Encrypt \"$SOURCE_FILE\" to \"$TARGET_FILE\"."

        openssl enc -e -aes256 \
            -k "fileb:///$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID" \
            -in "$SOURCE_FILE" \
            -out "$TARGET_FILE"
    fi
}

shred_file() {
    log "Shred file \"$1\"."

    # Shred options:
    #   --iterations=100 : Overwrite 100 times
    #   --remove         : Truncate and remove file after overwriting
    #   --zero           : Add a final overwrite with zeros to hide shredding
    shred --iterations=100 --remove=wipesync --zero "$1"
}

# (1) Create the KEY_DIR directory if it does not exists.
if [ ! -d "$PROJECT_DIR/$KEY_DIR/" ]; then
    log "Create \"$KEY_DIR/\" directory."
    mkdir -p "$PROJECT_DIR/$KEY_DIR/"
fi

# (2.1) Generate the CIPHERTEXT_BLOB_DECODED_ID if it does not exists.
if [ ! -f "$PROJECT_DIR/$KEY_DIR/$CIPHERTEXT_BLOB_DECODED_ID" ]; then
    log "File \"$CIPHERTEXT_BLOB_DECODED_ID\" file does not exist."
    log 'Generate data key with AES_256 spec.'

    aws kms generate-data-key \
        --key-id "$kms_key_id" \
        --key-spec 'AES_256' > "$PROJECT_DIR/$KEY_DIR/${DATA_KEY_ID}"

    log "Extract CiphertextBlob from \"$DATA_KEY_ID\"."
    sed -nr 's/^.*"CiphertextBlob":\s*"(.*?)".*$/\1/p' "$PROJECT_DIR/$KEY_DIR/${DATA_KEY_ID}" \
        | openssl base64 -d > "$PROJECT_DIR/$KEY_DIR/$CIPHERTEXT_BLOB_DECODED_ID"

    log "Extract Plaintext from \"$DATA_KEY_ID\"."
    sed -nr 's/^.*"Plaintext":\s*"(.*?)".*$/\1/p' "$PROJECT_DIR/$KEY_DIR/${DATA_KEY_ID}" \
        | openssl base64 -d > "$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID"

    shred_file "$PROJECT_DIR/$KEY_DIR/${DATA_KEY_ID}"
fi

# (2.2) Decrypt the PLAINTEXT_KEY_DECODED_ID if it does not exists.
if [ ! -f "$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID" ]; then
    log "File \"$PLAINTEXT_KEY_DECODED_ID\" file does not exist."
    log "Decrypt \"$PLAINTEXT_KEY_DECODED_ID\" from \"$CIPHERTEXT_BLOB_DECODED_ID\"."

    aws kms decrypt \
        --ciphertext-blob "fileb://$PROJECT_DIR/$KEY_DIR/$CIPHERTEXT_BLOB_DECODED_ID" \
        --query 'Plaintext' \
        --output text | openssl base64 -d -out "$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID"
fi

# (3) Iterate over the .decrypted/ directory, encrypt each file and store the output in .encrypted/
for DECRYPTED_FILE in $(find "$PROJECT_DIR/.decrypted" -type f ! -iname ".*" | sort -z); do
    ENCRYPTED_FILE=$(echo "$DECRYPTED_FILE" | sed -e "s/decrypted/encrypted/g")
    ENCRYPTED_DIR=$(dirname "$ENCRYPTED_FILE")

    if [ ! -d "$ENCRYPTED_DIR" ]; then
        log "Create \".encrypted/\" directory."
        mkdir -p "$ENCRYPTED_DIR/"
    fi

    file_count=$((file_count + 1))
    encrypt_file "$DECRYPTED_FILE" "$ENCRYPTED_FILE"
done

# (4) Remove the PLAINTEXT_KEY_DECODED_ID
shred_file "$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID"

readonly TIME_END=$(date +%s%N)
readonly TIME_DIFF=$((($TIME_END - $TIME_START) / 1000000))

log "Decrypted $file_count files in $TIME_DIFF milliseconds."
