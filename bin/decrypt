#!/usr/bin/env sh
# -----------------------------------------------------------------------------
# NAME
#       decrypt
#
# DESCRIPTION
#       This script iterates through the `.encrypted` directory recursively and
#       decryptes all containing files using aws kms and envelope encryption
#       with openssl.
# -----------------------------------------------------------------------------

usage() {
    echo "Usage: $0"
    echo "  --debug (boolean) Turn debugging on/ off"
    echo "  --help            Show this help context"
    exit 1
}

readonly TIME_START=$(date +%s%N)

readonly SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
readonly PROJECT_DIR=$(cd "${SCRIPT_DIR}/.." && pwd)

readonly KEY_DIR='.key'
readonly CIPHERTEXT_BLOB_DECODED_ID='ciphertext_blob_decoded'
readonly PLAINTEXT_KEY_DECODED_ID='plaintext_key_decoded'

debug=false
file_count=0

while [ $# -gt 0 ]; do
    case "$1" in
        --help)
            usage
            ;;
        --debug=*)
            debug="${1#*=}"
            ;;
        *)
            usage
  esac
  shift
done

# Check if openssl is installed
command -v openssl version >/dev/null 2>&1 || {
    echo >&2 "Please install openssel (e.g. https://github.com/openssl/openssl) in your path before continuing."
    exit 1
}

log() {
    if [ true = $debug ] && [ ! -z "$1" ]; then
        printf "%s: %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$1"
    fi
}

decrypt() {
    local SOURCE_FILE="$1" # Path of the encrypted target file.
    local TARGET_FILE="$2" # Path of the decrypted source file.

    log "#decrypt"
    log "  source: \"$SOURCE_FILE\""
    log "  target: \"$TARGET_FILE\""

    openssl enc -d -aes256 \
        -k "fileb:///$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID" \
        -in "$SOURCE_FILE" \
        -out "$TARGET_FILE"
}

shred_file() {
    log "Shred file \"$1\"."

    # Shred options:
    #   --iterations=100 : Overwrite 100 times
    #   --remove         : Truncate and remove file after overwriting
    #   --zero           : Add a final overwrite with zeros to hide shredding
    shred --iterations=100 --remove=wipesync --zero "$1"
}

# (1) Check if CIPHERTEXT_BLOB_DECODED_ID exists or exit with error message.
if [ ! -f "$PROJECT_DIR/$KEY_DIR/$CIPHERTEXT_BLOB_DECODED_ID" ]; then
    log "File \"$CIPHERTEXT_BLOB_DECODED_ID\" file does not exist."
    exit 1
fi

# (2) Decrypt the PLAINTEXT_KEY_DECODED_ID if it does not exists.
if [ ! -f "$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID" ]; then
    log "File \"$PLAINTEXT_KEY_DECODED_ID\" file does not exist."
    log "Decrypt \"$PLAINTEXT_KEY_DECODED_ID\" from \"$CIPHERTEXT_BLOB_DECODED_ID\"."

    aws kms decrypt \
        --ciphertext-blob "fileb://$PROJECT_DIR/$KEY_DIR/$CIPHERTEXT_BLOB_DECODED_ID" \
        --query 'Plaintext' \
        --output text | openssl base64 -d -out "$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID"
fi

# (3) Iterate over the .encrypted/ directory, decrypt each file and store the output in .decrypted/ dir
for ENCRYPTED_FILE in $(find "$PROJECT_DIR/.encrypted" -type f ! -iname ".*" | sort -z); do
    DECRYPTED_FILE=$(echo "${ENCRYPTED_FILE}" | sed -e "s/encrypted/decrypted/g")
    DECRYPTED_DIR=$(dirname "${DECRYPTED_FILE}")

    if [ ! -d "${DECRYPTED_DIR}" ]; then
        mkdir -p "${DECRYPTED_DIR}"
    fi

    file_count=$((file_count + 1))
    decrypt "$ENCRYPTED_FILE" "$DECRYPTED_FILE"
done

# (4) Remove the PLAINTEXT_KEY_DECODED_ID
shred_file "$PROJECT_DIR/$KEY_DIR/$PLAINTEXT_KEY_DECODED_ID"

readonly TIME_END=$(date +%s%N)
readonly TIME_DIFF=$((($TIME_END - $TIME_START) / 1000000))

log "Decrypted $file_count files in $TIME_DIFF milliseconds."
